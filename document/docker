sudo usermod -a -G docker $USER

sudo docker build -t solar/ubuntu:16.04 . #根据dockerfile创建镜像
sudo docker ps -a #查看所有容器
sudo docker rm container_ID #删除容器

sudo docker inspect -f '{{.Id}}' NAME #根据容器名字获得容器全部的ID
#将当前文件夹的encoder.py copy到061899a71a1d2e608ec1c87f8f97b7faa623f7da25801c3afc8c0282fc45d4b0这个容器的/app下
sudo docker cp encoder.py 061899a71a1d2e608ec1c87f8f97b7faa623f7da25801c3afc8c0282fc45d4b0:/app

sudo docker start 061899a71a1d #容器开始
sudo docker attach 061899a71a1d #进入容器，exit就退出停止
sudo docker exec #进入容器，exit就不退出
sudo docker stop #停止
sudo docker export #导出

如果要使用GPU版本要安装nvidia-docker(要使用GPU的要安装)
sudo docker run -it solar/ubuntu:16.04 /bin/bash 启动CPU版本的docker
sudo nvidia-docker run -it solar/ubuntu:16.04 /bin/bash 这个才可以用本机的GPU
sudo nvidia-docker run -d -P solar/ubuntu:16.04 python3.5 server.py

你的镜像可以建立在基础镜像之上
你本地建立了镜像就相当于建立了一个模板
你根据你的模板创建容器(可以创建多个),在不同容器上去做差异化操作
然后你不需要容器了，可以使用sudo docker rm删除这个容器
等没有一个容器的时候你才可以删除镜像
有点像对象和实例的感觉，又有点像父类和子类的感觉